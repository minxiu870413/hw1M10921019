{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/minxiu870413/hw1M10921019/blob/master/%E9%A1%9E%E7%A5%9E%E7%B6%93_%E7%B4%85%E9%85%92\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J4ZlwjqfPAVj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "882828e0-d8b3-48ef-a1b6-f369d8d36d02"
      },
      "source": [
        "# 下載 file_id 為 \"1ktkXrA7sxCpvBbubaPcbRH5CZN0NIX8x\" 的檔案，並將它命名為 winequality-red.csv\n",
        "!gdown --id '1ktkXrA7sxCpvBbubaPcbRH5CZN0NIX8x' --output datasets\n",
        "# 列出目前目錄下所有的檔案\n",
        "!ls"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1ktkXrA7sxCpvBbubaPcbRH5CZN0NIX8x\n",
            "To: /content/datasets\n",
            "\r  0% 0.00/85.7k [00:00<?, ?B/s]\r100% 85.7k/85.7k [00:00<00:00, 74.6MB/s]\n",
            "datasets  sample_data\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AYWXZHW6RpKZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "320dc6b7-c91f-4237-d3e4-ea800f6afc17"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "import numpy as np\n",
        "df = pd.read_csv('datasets')\n",
        "df.head()\n"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.098</td>\n",
              "      <td>25.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.9968</td>\n",
              "      <td>3.20</td>\n",
              "      <td>0.68</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.76</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.092</td>\n",
              "      <td>15.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.9970</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.65</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.2</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.075</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.9980</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.58</td>\n",
              "      <td>9.8</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   fixed acidity  volatile acidity  citric acid  ...  sulphates  alcohol  quality\n",
              "0            7.4              0.70         0.00  ...       0.56      9.4        5\n",
              "1            7.8              0.88         0.00  ...       0.68      9.8        5\n",
              "2            7.8              0.76         0.04  ...       0.65      9.8        5\n",
              "3           11.2              0.28         0.56  ...       0.58      9.8        6\n",
              "4            7.4              0.70         0.00  ...       0.56      9.4        5\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8s8NOCkOQVn9"
      },
      "source": [
        "#!ls\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "import keras\n",
        "import keras.utils\n",
        "from keras import utils as np_utils\n",
        "from keras.utils.np_utils import to_categorical\n",
        "y=df['quality']\n",
        "x=df.drop('quality',axis=1)\n",
        "\n",
        "x_train,x_test,y_train,y_test = train_test_split\\\n",
        "(x,y,test_size=0.2)\n",
        "x_train_normalize=x_train/255  #標準化\n",
        "x_test_normalize=x_test/255\n",
        "y_train_onehot = np_utils.to_categorical(y_train)  #one_hot轉換\n",
        "y_test_onehot = np_utils.to_categorical(y_test)\n"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VF3puvMCUDdy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8a530cbe-26ad-4b9a-9691-11529718720c"
      },
      "source": [
        "arr=df\n",
        "print(arr.ndim)\n",
        "print(arr.shape)\n",
        "print(arr.dtypes)\n"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2\n",
            "(1599, 12)\n",
            "fixed acidity           float64\n",
            "volatile acidity        float64\n",
            "citric acid             float64\n",
            "residual sugar          float64\n",
            "chlorides               float64\n",
            "free sulfur dioxide     float64\n",
            "total sulfur dioxide    float64\n",
            "density                 float64\n",
            "pH                      float64\n",
            "sulphates               float64\n",
            "alcohol                 float64\n",
            "quality                   int64\n",
            "dtype: object\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xFpy1TumWY5G",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "993d5fa3-55cf-4839-aab7-eace371d4fa3"
      },
      "source": [
        "x_train1D=np.asarray(x_train_normalize).astype('float32')\n",
        "x_test1D=np.asarray(x_test_normalize).astype('float32')\n",
        "y_train1D=np.asarray(y_train_onehot).astype('float32')\n",
        "y_test1D=np.asarray(y_test_onehot).astype('float32')\n",
        "array=x_train\n",
        "array"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>641</th>\n",
              "      <td>9.5</td>\n",
              "      <td>0.590</td>\n",
              "      <td>0.44</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.071</td>\n",
              "      <td>21.0</td>\n",
              "      <td>68.0</td>\n",
              "      <td>0.99920</td>\n",
              "      <td>3.46</td>\n",
              "      <td>0.63</td>\n",
              "      <td>9.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>988</th>\n",
              "      <td>7.7</td>\n",
              "      <td>0.390</td>\n",
              "      <td>0.12</td>\n",
              "      <td>1.7</td>\n",
              "      <td>0.097</td>\n",
              "      <td>19.0</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0.99596</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.49</td>\n",
              "      <td>9.400000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.600</td>\n",
              "      <td>0.14</td>\n",
              "      <td>2.4</td>\n",
              "      <td>0.086</td>\n",
              "      <td>3.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>0.99750</td>\n",
              "      <td>3.42</td>\n",
              "      <td>0.60</td>\n",
              "      <td>10.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>79</th>\n",
              "      <td>8.3</td>\n",
              "      <td>0.625</td>\n",
              "      <td>0.20</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.080</td>\n",
              "      <td>27.0</td>\n",
              "      <td>119.0</td>\n",
              "      <td>0.99720</td>\n",
              "      <td>3.16</td>\n",
              "      <td>1.12</td>\n",
              "      <td>9.100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>230</th>\n",
              "      <td>5.2</td>\n",
              "      <td>0.480</td>\n",
              "      <td>0.04</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0.054</td>\n",
              "      <td>19.0</td>\n",
              "      <td>106.0</td>\n",
              "      <td>0.99270</td>\n",
              "      <td>3.54</td>\n",
              "      <td>0.62</td>\n",
              "      <td>12.200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1362</th>\n",
              "      <td>11.6</td>\n",
              "      <td>0.475</td>\n",
              "      <td>0.40</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.091</td>\n",
              "      <td>6.0</td>\n",
              "      <td>28.0</td>\n",
              "      <td>0.99704</td>\n",
              "      <td>3.07</td>\n",
              "      <td>0.65</td>\n",
              "      <td>10.033333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>535</th>\n",
              "      <td>9.1</td>\n",
              "      <td>0.220</td>\n",
              "      <td>0.24</td>\n",
              "      <td>2.1</td>\n",
              "      <td>0.078</td>\n",
              "      <td>1.0</td>\n",
              "      <td>28.0</td>\n",
              "      <td>0.99900</td>\n",
              "      <td>3.41</td>\n",
              "      <td>0.87</td>\n",
              "      <td>10.300000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1417</th>\n",
              "      <td>7.3</td>\n",
              "      <td>0.340</td>\n",
              "      <td>0.33</td>\n",
              "      <td>2.5</td>\n",
              "      <td>0.064</td>\n",
              "      <td>21.0</td>\n",
              "      <td>37.0</td>\n",
              "      <td>0.99520</td>\n",
              "      <td>3.35</td>\n",
              "      <td>0.77</td>\n",
              "      <td>12.100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1538</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.640</td>\n",
              "      <td>0.09</td>\n",
              "      <td>2.5</td>\n",
              "      <td>0.081</td>\n",
              "      <td>15.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0.99538</td>\n",
              "      <td>3.57</td>\n",
              "      <td>0.63</td>\n",
              "      <td>12.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>8.9</td>\n",
              "      <td>0.220</td>\n",
              "      <td>0.48</td>\n",
              "      <td>1.8</td>\n",
              "      <td>0.077</td>\n",
              "      <td>29.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.99680</td>\n",
              "      <td>3.39</td>\n",
              "      <td>0.53</td>\n",
              "      <td>9.400000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1279 rows × 11 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  ...    pH  sulphates    alcohol\n",
              "641             9.5             0.590         0.44  ...  3.46       0.63   9.500000\n",
              "988             7.7             0.390         0.12  ...  3.16       0.49   9.400000\n",
              "36              7.8             0.600         0.14  ...  3.42       0.60  10.800000\n",
              "79              8.3             0.625         0.20  ...  3.16       1.12   9.100000\n",
              "230             5.2             0.480         0.04  ...  3.54       0.62  12.200000\n",
              "...             ...               ...          ...  ...   ...        ...        ...\n",
              "1362           11.6             0.475         0.40  ...  3.07       0.65  10.033333\n",
              "535             9.1             0.220         0.24  ...  3.41       0.87  10.300000\n",
              "1417            7.3             0.340         0.33  ...  3.35       0.77  12.100000\n",
              "1538            6.2             0.640         0.09  ...  3.57       0.63  12.000000\n",
              "20              8.9             0.220         0.48  ...  3.39       0.53   9.400000\n",
              "\n",
              "[1279 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nu6HvVYUHn3l"
      },
      "source": [
        "from keras.models import Sequential #在使用前需要先提前導入這個函數\n",
        "model = Sequential()\n",
        "from keras.layers import Dense\n",
        "\"\"\"\n",
        "    建立輸入層和第一層隱蔽層\n",
        "    \n",
        "    參數：\n",
        "        units - 隱蔽層神經元個數\n",
        "        input_dim - 輸入層神經元個數\n",
        "        kernel_initializer - 使用normal distribution正態分佈的隨機數來初始化權重和方差\n",
        "        activation - 定義激活函數\n",
        "\"\"\"\n",
        "model.add(Dense(units = 224,  \n",
        "                input_dim = 11,  \n",
        "                kernel_initializer = 'normal',  \n",
        "                activation = 'relu'))  "
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oxkzMZ67Tcbr"
      },
      "source": [
        "from keras.layers import Dropout\n",
        "model.add(Dropout(0.5)) #隨機消除50%的神經單元"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2VB6AExTTgOq"
      },
      "source": [
        "\"\"\"\n",
        "    建立輸出層\n",
        "    \n",
        "    參數：\n",
        "        units - 輸出層神經元個數\n",
        "        kernel_initializer - 使用normal distribution正態分佈的隨機數來初始化權重和方差\n",
        "        activation - 定義激活函數\n",
        "\"\"\"\n",
        "model.add(Dense(units = 9,\n",
        "                kernel_initializer = 'normal',\n",
        "                activation = 'softmax'))"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CLeccMqETnoa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d28d8e2f-a87d-4603-9ae3-7839e919d6da"
      },
      "source": [
        "print(model.summary())"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense (Dense)                (None, 224)               2688      \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 224)               0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 9)                 2025      \n",
            "=================================================================\n",
            "Total params: 4,713\n",
            "Trainable params: 4,713\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SBZ_8GWJT2_S"
      },
      "source": [
        "\"\"\"\n",
        "    定義訓練方式\n",
        "\n",
        "    參數：\n",
        "        loss - 損失函數： 這裏採用交叉熵的方式\n",
        "        optimizer - 優化器: 使用adam優化器可以讓訓練收斂更快\n",
        "        metrics - 評估模型：設置爲準確率\n",
        "\n",
        "\"\"\"\n",
        "model.compile(loss = 'categorical_crossentropy',  \n",
        "                     optimizer = 'adam', metrics = ['accuracy'])"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P6EWF7T2ULQ6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "99c9ccf5-5ef3-4d5c-fd62-86fa4b6bec6c"
      },
      "source": [
        "\"\"\"\n",
        "    開始訓練\n",
        "\n",
        "    參數：\n",
        "        X_train_normalize - feature數字圖像的特徵值\n",
        "        y_train_one_hot - 數字圖像的真實標籤\n",
        "        metrics - 評估模型：設置爲準確率\n",
        "        validation_spli - 訓練與驗證數據比例：80%用作訓練數據，20%用作驗證數據\n",
        "        epochs - 訓練週期\n",
        "        batch_size - 每批次的數據項數\n",
        "        verbose - 顯示訓練過程\n",
        "\"\"\"\n",
        "model.fit(x=x_train1D,y=y_train1D,validation_split=0.2,\n",
        "                          epochs=100,batch_size=2,verbose=1)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.3634 - accuracy: 0.4037 - val_loss: 1.1901 - val_accuracy: 0.3867\n",
            "Epoch 2/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1852 - accuracy: 0.4457 - val_loss: 1.1684 - val_accuracy: 0.4492\n",
            "Epoch 3/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1782 - accuracy: 0.4311 - val_loss: 1.1729 - val_accuracy: 0.4883\n",
            "Epoch 4/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1746 - accuracy: 0.4604 - val_loss: 1.1620 - val_accuracy: 0.4648\n",
            "Epoch 5/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1715 - accuracy: 0.4418 - val_loss: 1.1587 - val_accuracy: 0.4766\n",
            "Epoch 6/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1546 - accuracy: 0.4643 - val_loss: 1.1459 - val_accuracy: 0.4844\n",
            "Epoch 7/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1585 - accuracy: 0.4721 - val_loss: 1.1474 - val_accuracy: 0.4883\n",
            "Epoch 8/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1605 - accuracy: 0.4741 - val_loss: 1.1469 - val_accuracy: 0.4883\n",
            "Epoch 9/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1591 - accuracy: 0.4907 - val_loss: 1.1488 - val_accuracy: 0.4805\n",
            "Epoch 10/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1501 - accuracy: 0.4888 - val_loss: 1.1672 - val_accuracy: 0.4727\n",
            "Epoch 11/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1532 - accuracy: 0.4868 - val_loss: 1.1391 - val_accuracy: 0.4805\n",
            "Epoch 12/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1603 - accuracy: 0.4829 - val_loss: 1.1443 - val_accuracy: 0.4727\n",
            "Epoch 13/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1465 - accuracy: 0.4966 - val_loss: 1.1478 - val_accuracy: 0.4844\n",
            "Epoch 14/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1468 - accuracy: 0.4907 - val_loss: 1.1381 - val_accuracy: 0.4727\n",
            "Epoch 15/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1485 - accuracy: 0.4976 - val_loss: 1.1365 - val_accuracy: 0.4922\n",
            "Epoch 16/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1529 - accuracy: 0.4848 - val_loss: 1.1488 - val_accuracy: 0.5000\n",
            "Epoch 17/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1450 - accuracy: 0.4946 - val_loss: 1.1433 - val_accuracy: 0.4844\n",
            "Epoch 18/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1455 - accuracy: 0.4858 - val_loss: 1.1471 - val_accuracy: 0.4844\n",
            "Epoch 19/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1411 - accuracy: 0.4976 - val_loss: 1.1350 - val_accuracy: 0.4922\n",
            "Epoch 20/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1440 - accuracy: 0.4888 - val_loss: 1.1403 - val_accuracy: 0.4805\n",
            "Epoch 21/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1405 - accuracy: 0.4976 - val_loss: 1.1431 - val_accuracy: 0.4883\n",
            "Epoch 22/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1420 - accuracy: 0.5005 - val_loss: 1.1368 - val_accuracy: 0.4805\n",
            "Epoch 23/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1402 - accuracy: 0.5112 - val_loss: 1.1351 - val_accuracy: 0.4688\n",
            "Epoch 24/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1423 - accuracy: 0.5083 - val_loss: 1.1314 - val_accuracy: 0.4883\n",
            "Epoch 25/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1332 - accuracy: 0.5015 - val_loss: 1.1415 - val_accuracy: 0.5000\n",
            "Epoch 26/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1306 - accuracy: 0.5015 - val_loss: 1.1407 - val_accuracy: 0.4766\n",
            "Epoch 27/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1433 - accuracy: 0.4956 - val_loss: 1.1322 - val_accuracy: 0.4688\n",
            "Epoch 28/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1330 - accuracy: 0.4956 - val_loss: 1.1409 - val_accuracy: 0.4844\n",
            "Epoch 29/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1348 - accuracy: 0.5015 - val_loss: 1.1341 - val_accuracy: 0.4688\n",
            "Epoch 30/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1332 - accuracy: 0.5064 - val_loss: 1.1361 - val_accuracy: 0.4727\n",
            "Epoch 31/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1327 - accuracy: 0.5044 - val_loss: 1.1375 - val_accuracy: 0.4727\n",
            "Epoch 32/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1265 - accuracy: 0.4956 - val_loss: 1.1312 - val_accuracy: 0.5039\n",
            "Epoch 33/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1258 - accuracy: 0.5034 - val_loss: 1.1303 - val_accuracy: 0.4766\n",
            "Epoch 34/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1312 - accuracy: 0.5171 - val_loss: 1.1380 - val_accuracy: 0.4961\n",
            "Epoch 35/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1272 - accuracy: 0.5200 - val_loss: 1.1327 - val_accuracy: 0.4648\n",
            "Epoch 36/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1275 - accuracy: 0.5073 - val_loss: 1.1259 - val_accuracy: 0.4883\n",
            "Epoch 37/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1295 - accuracy: 0.5034 - val_loss: 1.1291 - val_accuracy: 0.4727\n",
            "Epoch 38/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1234 - accuracy: 0.5112 - val_loss: 1.1276 - val_accuracy: 0.5000\n",
            "Epoch 39/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1274 - accuracy: 0.4848 - val_loss: 1.1254 - val_accuracy: 0.4922\n",
            "Epoch 40/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1228 - accuracy: 0.5230 - val_loss: 1.1442 - val_accuracy: 0.5000\n",
            "Epoch 41/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1134 - accuracy: 0.5142 - val_loss: 1.1353 - val_accuracy: 0.4805\n",
            "Epoch 42/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1181 - accuracy: 0.5103 - val_loss: 1.1237 - val_accuracy: 0.4922\n",
            "Epoch 43/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1185 - accuracy: 0.5112 - val_loss: 1.1264 - val_accuracy: 0.4961\n",
            "Epoch 44/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1108 - accuracy: 0.5132 - val_loss: 1.1395 - val_accuracy: 0.4922\n",
            "Epoch 45/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0972 - accuracy: 0.5200 - val_loss: 1.1511 - val_accuracy: 0.5117\n",
            "Epoch 46/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1191 - accuracy: 0.5054 - val_loss: 1.1243 - val_accuracy: 0.4805\n",
            "Epoch 47/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1174 - accuracy: 0.5073 - val_loss: 1.1260 - val_accuracy: 0.4961\n",
            "Epoch 48/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1068 - accuracy: 0.5103 - val_loss: 1.1353 - val_accuracy: 0.4844\n",
            "Epoch 49/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1036 - accuracy: 0.5122 - val_loss: 1.1414 - val_accuracy: 0.4922\n",
            "Epoch 50/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1014 - accuracy: 0.5103 - val_loss: 1.1221 - val_accuracy: 0.5000\n",
            "Epoch 51/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0983 - accuracy: 0.5181 - val_loss: 1.1205 - val_accuracy: 0.5078\n",
            "Epoch 52/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.1042 - accuracy: 0.5220 - val_loss: 1.1204 - val_accuracy: 0.4844\n",
            "Epoch 53/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0879 - accuracy: 0.5279 - val_loss: 1.1230 - val_accuracy: 0.4844\n",
            "Epoch 54/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0972 - accuracy: 0.5376 - val_loss: 1.1170 - val_accuracy: 0.4961\n",
            "Epoch 55/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0871 - accuracy: 0.5327 - val_loss: 1.1145 - val_accuracy: 0.5117\n",
            "Epoch 56/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0871 - accuracy: 0.5327 - val_loss: 1.1186 - val_accuracy: 0.4844\n",
            "Epoch 57/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0890 - accuracy: 0.5318 - val_loss: 1.1128 - val_accuracy: 0.4961\n",
            "Epoch 58/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0823 - accuracy: 0.5083 - val_loss: 1.1197 - val_accuracy: 0.5039\n",
            "Epoch 59/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0835 - accuracy: 0.5308 - val_loss: 1.1184 - val_accuracy: 0.5000\n",
            "Epoch 60/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0942 - accuracy: 0.5122 - val_loss: 1.1103 - val_accuracy: 0.5000\n",
            "Epoch 61/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0785 - accuracy: 0.5220 - val_loss: 1.1082 - val_accuracy: 0.5156\n",
            "Epoch 62/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0676 - accuracy: 0.5337 - val_loss: 1.1067 - val_accuracy: 0.5234\n",
            "Epoch 63/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0776 - accuracy: 0.5230 - val_loss: 1.1247 - val_accuracy: 0.4961\n",
            "Epoch 64/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0686 - accuracy: 0.5464 - val_loss: 1.1189 - val_accuracy: 0.4961\n",
            "Epoch 65/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0730 - accuracy: 0.5230 - val_loss: 1.1112 - val_accuracy: 0.5039\n",
            "Epoch 66/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0710 - accuracy: 0.5230 - val_loss: 1.1085 - val_accuracy: 0.5039\n",
            "Epoch 67/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0661 - accuracy: 0.5288 - val_loss: 1.1275 - val_accuracy: 0.4922\n",
            "Epoch 68/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0720 - accuracy: 0.5376 - val_loss: 1.1021 - val_accuracy: 0.5234\n",
            "Epoch 69/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0637 - accuracy: 0.5406 - val_loss: 1.1057 - val_accuracy: 0.5078\n",
            "Epoch 70/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0643 - accuracy: 0.5249 - val_loss: 1.1007 - val_accuracy: 0.5273\n",
            "Epoch 71/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0583 - accuracy: 0.5367 - val_loss: 1.0980 - val_accuracy: 0.5156\n",
            "Epoch 72/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0588 - accuracy: 0.5367 - val_loss: 1.1265 - val_accuracy: 0.5117\n",
            "Epoch 73/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0640 - accuracy: 0.5455 - val_loss: 1.0941 - val_accuracy: 0.5273\n",
            "Epoch 74/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0526 - accuracy: 0.5425 - val_loss: 1.1007 - val_accuracy: 0.5117\n",
            "Epoch 75/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0359 - accuracy: 0.5533 - val_loss: 1.1053 - val_accuracy: 0.5195\n",
            "Epoch 76/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0474 - accuracy: 0.5425 - val_loss: 1.0947 - val_accuracy: 0.5312\n",
            "Epoch 77/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0441 - accuracy: 0.5494 - val_loss: 1.0965 - val_accuracy: 0.5234\n",
            "Epoch 78/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0478 - accuracy: 0.5513 - val_loss: 1.1030 - val_accuracy: 0.5234\n",
            "Epoch 79/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0410 - accuracy: 0.5376 - val_loss: 1.0952 - val_accuracy: 0.5312\n",
            "Epoch 80/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0441 - accuracy: 0.5425 - val_loss: 1.0891 - val_accuracy: 0.5312\n",
            "Epoch 81/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0397 - accuracy: 0.5494 - val_loss: 1.0849 - val_accuracy: 0.5273\n",
            "Epoch 82/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0424 - accuracy: 0.5494 - val_loss: 1.0889 - val_accuracy: 0.5352\n",
            "Epoch 83/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0283 - accuracy: 0.5523 - val_loss: 1.0810 - val_accuracy: 0.5469\n",
            "Epoch 84/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0286 - accuracy: 0.5494 - val_loss: 1.0839 - val_accuracy: 0.5352\n",
            "Epoch 85/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0303 - accuracy: 0.5425 - val_loss: 1.0802 - val_accuracy: 0.5312\n",
            "Epoch 86/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0268 - accuracy: 0.5503 - val_loss: 1.0789 - val_accuracy: 0.5469\n",
            "Epoch 87/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0211 - accuracy: 0.5435 - val_loss: 1.0881 - val_accuracy: 0.5352\n",
            "Epoch 88/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0230 - accuracy: 0.5552 - val_loss: 1.0851 - val_accuracy: 0.5391\n",
            "Epoch 89/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0235 - accuracy: 0.5464 - val_loss: 1.0759 - val_accuracy: 0.5430\n",
            "Epoch 90/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0120 - accuracy: 0.5533 - val_loss: 1.0866 - val_accuracy: 0.5508\n",
            "Epoch 91/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0161 - accuracy: 0.5601 - val_loss: 1.0852 - val_accuracy: 0.5469\n",
            "Epoch 92/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0170 - accuracy: 0.5513 - val_loss: 1.0721 - val_accuracy: 0.5430\n",
            "Epoch 93/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0143 - accuracy: 0.5611 - val_loss: 1.0737 - val_accuracy: 0.5547\n",
            "Epoch 94/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0151 - accuracy: 0.5572 - val_loss: 1.0996 - val_accuracy: 0.5469\n",
            "Epoch 95/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0202 - accuracy: 0.5591 - val_loss: 1.0708 - val_accuracy: 0.5430\n",
            "Epoch 96/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0018 - accuracy: 0.5650 - val_loss: 1.0731 - val_accuracy: 0.5508\n",
            "Epoch 97/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0191 - accuracy: 0.5543 - val_loss: 1.0724 - val_accuracy: 0.5586\n",
            "Epoch 98/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0095 - accuracy: 0.5435 - val_loss: 1.0886 - val_accuracy: 0.5664\n",
            "Epoch 99/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0048 - accuracy: 0.5591 - val_loss: 1.1007 - val_accuracy: 0.5352\n",
            "Epoch 100/100\n",
            "512/512 [==============================] - 1s 1ms/step - loss: 1.0140 - accuracy: 0.5689 - val_loss: 1.0654 - val_accuracy: 0.5664\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7ff12576dfd0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A38UpXEDWAo8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e505c364-bff6-4309-b5fe-e6a3c5d6b472"
      },
      "source": [
        "# 評估模型的準確率\n",
        "scores = model.evaluate(x_test1D, y_test1D)\n",
        "print()\n",
        "print('accuracy=',scores[1])"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "10/10 [==============================] - 0s 1ms/step - loss: 1.0113 - accuracy: 0.5500\n",
            "\n",
            "accuracy= 0.550000011920929\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oGhTyuEb5OG8"
      },
      "source": [
        "y_predict = model.predict(x_test1D)"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GH8pXEQd5PLj",
        "outputId": "a7794aa7-36aa-4a04-acba-a05bbd5df470"
      },
      "source": [
        "from sklearn import metrics\n",
        "\n",
        "metrics.mean_squared_error(y_test1D,y_predict)\n",
        "print('RMSE：', np.sqrt(metrics.mean_squared_error(y_test1D,y_predict)))"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "RMSE： 0.24858895\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VgoFDVCuLS3R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "42dd7505-47a0-40a6-d40f-2a34195fb596"
      },
      "source": [
        "def mape(y_test, y_predict):\n",
        "    return np.mean(np.abs((y_predict - y_test1D) / (y_test1D +1))) * 100\n",
        "print('MAPE:',mape(y_test1D, y_predict))"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MAPE: 9.362328797578812\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}